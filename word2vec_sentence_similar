#coding=utf-8
from gensim.models import word2vec
from gensim.models.word2vec import LineSentence
from gensim.models.keyedvectors import KeyedVectors
import numpy as np

def cos_sim(vector1, vector2):
    dot_product = 0.0;
    normA = 0.0;
    normB = 0.0;
    for a, b in zip(vector1, vector2):
        dot_product += a * b
        normA += a ** 2
        normB += b ** 2
    if normA == 0.0 or normB == 0.0:
        return None
    else:
        return dot_product / ((normA * normB) ** 0.5)
#sentences=LineSentence('/home/jinguo/code/10w_content_seg')
# sentences=word2vec.Text8Corpus(u'/home/jinguo/code/10w_seg_content_1019')
# model=word2vec.Word2Vec(sentences,size=200,window=6,min_count=10)
# model.wv.save_word2vec_format('./word2vec_model')

model=KeyedVectors.load_word2vec_format('./word2vec_model')

f1=open('/home/jinguo/code/10w_seg_title_1019','r')
f2=open('/home/jinguo/code/10w_seg_content_1019','r')
for title,content in zip(f1,f2):
    title_list=title.rstrip('\n').decode('utf-8').split()
    content_list = content.rstrip('\n').decode('utf-8').split()
    title_vector=np.zeros(50)
    content_vector=np.zeros(50)#词向量维度大小
    title_count=0
    content_count=0
    for word in title_list:
        if word.strip() in model.vocab.keys():
            title_vector+=model[word.strip()]
            title_count+=1
        else:
            continue
    for word in content_list:
        if word.strip() in model.vocab.keys():
            content_vector += model[word.strip()]
            content_count += 1
        #print word,model[word],type(model[word])
        else:
            continue
    try:
        title_vector=title_vector/title_count
        content_vector=content_vector/content_count
    except ZeroDivisionError,e:
        print e.message
    score_sim=cos_sim(title_vector,content_vector)
    print score_sim
